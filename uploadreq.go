// Modified by Giacomo Tartari
// Copyright 2018 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package pkt

import (
	"fmt"
	"io"
	"strconv"
	"strings"
)

type UploadRequestState int

const (
	UploadRequestBegin UploadRequestState = iota
	UploadRequestScanWants
	UploadRequestScanShallows
	UploadRequestScanDepth
	UploadRequestScanFilter
	UploadRequestBeginNegotiationOrDoneOrEnd
	UploadRequestNegotiation
	UploadRequestScanHaves
	UploadRequestEnd
)

// UploadRequestChunk is a chunk of a protocol v1 git-upload-pack
// request.
type UploadRequestChunk struct {
	Capabilities    []string
	WantObjectID    string
	ShallowObjectID string
	DeepenDepth     int
	// Not documented, but seconds from UNIX epoch.
	DeepenSince       uint64
	DeepenNotRef      string
	FilterSpec        string
	HaveObjectID      string
	EndOneRound       bool
	NoMoreNegotiation bool
}

// EncodeToPktLine serializes the chunk.
func (c *UploadRequestChunk) EncodeToPktLine() []byte {
	if len(c.Capabilities) > 0 && c.WantObjectID != "" {
		return BytesPacket([]byte(fmt.Sprintf("want %s %s\n", c.WantObjectID, strings.Join(c.Capabilities, " ")))).EncodeToPktLine()
	}
	if c.WantObjectID != "" {
		return BytesPacket([]byte(fmt.Sprintf("want %s\n", c.WantObjectID))).EncodeToPktLine()
	}
	if c.ShallowObjectID != "" {
		return BytesPacket([]byte(fmt.Sprintf("shallow %s\n", c.ShallowObjectID))).EncodeToPktLine()
	}
	if c.DeepenDepth != 0 {
		return BytesPacket([]byte(fmt.Sprintf("deepen %d\n", c.DeepenDepth))).EncodeToPktLine()
	}
	if c.DeepenSince != 0 {
		return BytesPacket([]byte(fmt.Sprintf("deepen-since %d\n", c.DeepenSince))).EncodeToPktLine()
	}
	if c.DeepenNotRef != "" {
		return BytesPacket([]byte(fmt.Sprintf("deepen-not %s\n", c.DeepenNotRef))).EncodeToPktLine()
	}
	if c.FilterSpec != "" {
		return BytesPacket([]byte(fmt.Sprintf("filter %s\n", c.FilterSpec))).EncodeToPktLine()
	}
	if c.HaveObjectID != "" {
		return BytesPacket([]byte(fmt.Sprintf("have %s\n", c.HaveObjectID))).EncodeToPktLine()
	}
	if c.EndOneRound {
		return FlushPacket{}.EncodeToPktLine()
	}
	if c.NoMoreNegotiation {
		return BytesPacket([]byte("done\n")).EncodeToPktLine()
	}
	panic("impossible chunk")
}

// UploadRequest provides an interface for reading a protocol v1
// git-upload-pack request.
type UploadRequest struct {
	scanner *PacketScanner
	state   UploadRequestState
	err     error
	curr    *UploadRequestChunk
}

// NewUploadRequest returns a new UploadRequest to
// read from rd.
func NewUploadRequest(rd io.Reader) *UploadRequest {
	return &UploadRequest{scanner: NewPacketScanner(rd)}
}

// Err returns the first non-EOF error that was encountered by the
// ProtocolV1UploadPackRequest.
func (r *UploadRequest) Err() error {
	return r.err
}

// Chunk returns the most recent chunk generated by a call to Scan.
func (r *UploadRequest) Chunk() *UploadRequestChunk {
	return r.curr
}

// Scan advances the scanner to the next packet. It returns false when the scan
// stops, either by reaching the end of the input or an error. After scan
// returns false, the Err method will return any error that occurred during
// scanning, except that if it was io.EOF, Err will return nil.
func (r *UploadRequest) Scan() bool {
	if r.err != nil || r.state == UploadRequestEnd {
		return false
	}
	if !r.scanner.Scan() {
		r.err = r.scanner.Err()
		if r.err == nil && r.state != UploadRequestBeginNegotiationOrDoneOrEnd {
			r.err = SyntaxError("early EOF")
		}
		return false
	}
	pkt := r.scanner.Packet()

	if r.state == UploadRequestBegin {
		bp, ok := pkt.(BytesPacket)
		if !ok {
			r.err = SyntaxError(fmt.Sprintf("unexpected packet: %#v", pkt))
			return false
		}
		ss := strings.SplitN(string(bp), " ", 3)
		if len(ss) < 2 {
			r.err = SyntaxError("cannot split wants: " + string(bp))
			return false
		}
		caps := []string{}
		if len(ss) == 3 {
			if capStr := strings.TrimSuffix(ss[2], "\n"); capStr != "" {
				// This is to avoid strings.Split("", " ") => []string{""}.
				caps = strings.Split(capStr, " ")
			}
		}
		if ss[0] != "want" {
			r.err = SyntaxError("the first packet is not want: " + string(bp))
		}
		r.state = UploadRequestScanWants
		r.curr = &UploadRequestChunk{
			Capabilities: caps,
			WantObjectID: ss[1],
		}
		return true
	}

	if _, ok := pkt.(FlushPacket); ok {
		r.state = UploadRequestBeginNegotiationOrDoneOrEnd
		r.curr = &UploadRequestChunk{
			EndOneRound: true,
		}
		return true
	}

	bp, ok := pkt.(BytesPacket)
	if !ok {
		r.err = SyntaxError(fmt.Sprintf("unexpected packet: %#v", pkt))
		return false
	}
	s := strings.TrimSuffix(string(bp), "\n")

	if s == "done" {
		if r.state == UploadRequestNegotiation || r.state == UploadRequestBeginNegotiationOrDoneOrEnd {
			r.state = UploadRequestEnd
			r.curr = &UploadRequestChunk{
				NoMoreNegotiation: true,
			}
			return true
		}
		r.err = SyntaxError(fmt.Sprintf("unexpected packet: %#v", pkt))
		return false
	}

	ss := strings.SplitN(s, " ", 2)
	if len(ss) != 2 {
		r.err = SyntaxError(fmt.Sprintf("unexpected packet: %#v", pkt))
		return false
	}

	switch r.state {
	case UploadRequestScanWants:
		if ss[0] == "want" {
			r.curr = &UploadRequestChunk{
				WantObjectID: ss[1],
			}
			return true
		}
		fallthrough
	case UploadRequestScanShallows:
		if ss[0] == "shallow" {
			r.state = UploadRequestScanShallows
			r.curr = &UploadRequestChunk{
				ShallowObjectID: ss[1],
			}
			return true
		}
		fallthrough
	case UploadRequestScanDepth:
		if ss[0] == "deepen" {
			depth, err := strconv.ParseInt(ss[1], 10, strconv.IntSize)
			if err != nil {
				r.err = SyntaxError("cannot parse depth")
				return false
			}
			r.state = UploadRequestScanFilter
			r.curr = &UploadRequestChunk{
				DeepenDepth: int(depth),
			}
			return true
		}
		if ss[0] == "deepen-since" {
			since, err := strconv.ParseUint(ss[1], 10, 64)
			if err != nil {
				r.err = SyntaxError("cannot parse depth")
				return false
			}
			r.state = UploadRequestScanFilter
			r.curr = &UploadRequestChunk{
				DeepenSince: since,
			}
			return true
		}
		if ss[0] == "deepen-not" {
			r.state = UploadRequestScanFilter
			r.curr = &UploadRequestChunk{
				DeepenNotRef: ss[1],
			}
			return true
		}
		fallthrough
	case UploadRequestScanFilter:
		if ss[0] != "filter" {
			r.err = SyntaxError(fmt.Sprintf("unexpected packet: %#v", pkt))
			return false
		}
		r.state = UploadRequestNegotiation
		r.curr = &UploadRequestChunk{
			FilterSpec: ss[1],
		}
		return true
	case UploadRequestNegotiation, UploadRequestBeginNegotiationOrDoneOrEnd:
		if ss[0] != "have" {
			r.err = SyntaxError(fmt.Sprintf("unexpected packet: %#v", pkt))
			return false
		}
		r.state = UploadRequestNegotiation
		r.curr = &UploadRequestChunk{
			HaveObjectID: ss[1],
		}
		return true
	}
	panic("impossible state")
}
